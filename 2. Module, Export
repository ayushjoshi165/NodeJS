So NodeJS implements something called CommonJS modules.

Oh well actually, one more big word alert.

CommonJS modules: that just means an agreed upon

standard for how code modules should be structured.

You may here the phrase CommonJS.

It's just a set of standards.

So NodeJS said the way that common

JS modules, the way that standard

says the way modules should be structured,

we agree with that.

So we're going to design a way for you to structure

your Javascript code in modules that

will follow this standard.

-------------------------------------------

First-class functions: everything you can do

with other types, like strings or numbers,

you can do with functions.

A lot of major programming languages

do not have this feature.

JavaScript does.

-------------------------------------------

we created a module called greet.js and accessed it through app.js using require('./greet.js'), this will print the console from greet.js but we can not 

call the function efined in greet.js by its name because its protected 

Remember we said that a module should,

not only encapsulate code, but it should

make sure that the code that's in the module

doesn't accidentally or unintentionally affect

the rest of the code in the application.

The code inside greet.js is protected.

App.js doesn't simply have access to it unless

I want it to.

It can't go get its variables, its functions, its objects.

We would have to explicitly make that available, and we do that by using module.exports = greet;

now we can store that greet and call it in the app.js
like

greet.js
=================
var greet = function(){
console.log("Hello There!");
}
module.exports = greet; // here i am exposing only what we want to, that is greet in this case

===============
app.js 
======
var greet = require('./greet.js');
greet();// it will print Hello there 
// but if we would have not exported greet then it will show error.
=====



