1) Revealing module pattern is the most popular one

greet5.js
============

var greeting = "Hello world";

function greet(){
console.log(greeting);
}

module.exports = {
greet : greet
}
// here we are only revieling the greet function so but how the javascript works it function has access to greeting variable out of the module if its require in other file
// but still the greeting varaible is protected I can not change the greeting varaible

// so in app.js ,we can write 

var greeting = require("./greet5.js");

greeting.greet();



remember that if you simply return an object

from require, that will be cached

and any other call to that same file

via the require function will get you back

this same object everywhere.

2) Overrriding export with the function 


greet2.js
----
module.exports = function(){

console.log("Hello World 2");
}
-----
app.js
-----

var greeting = require("./greet2.js");
greting();


3) Instead of replacing module.exports with function I can add a property to it

greet3.js

module.exports.greet = function (){
console.log("Hello 3");
}

-------
app.js 

var greeting = require("./greet3");
greeting.greet();

0r I can do 

var greeting = reqire("./greet3").greet;
greeting();

// both will work


3) Using function constructor

// using function constructor

function Greetr() {
  this.greeting = "Hello World 3!";

  this.greet = function () {
    console.log(this.greeting);
  };
}

module.exports = new Greetr();
-----------

app.js

var greet3 = require("./greet3");
greet3.greet();
------------------


